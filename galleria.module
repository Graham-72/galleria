<?php

/**
 * @file
 * A light-weight, customizable image gallery plugin for Drupal based on jQuery
 */

/**
 * Implements hook_menu().
 */
function galleria_menu() {
  $items = array();
  
  $items['admin/config/media/galleria'] = array(
    'title' => 'Galleria',
    'description' => 'Adjust Galleria settings.',
    'file' => 'galleria.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('galleria_admin_settings'),
    'access arguments' => array('administer site configuration'),
  );
  
  return $items;
}



/**
 * Implementation of hook_field_formatter_info().
 * 
 * Adds the Galleria format option within the manage display form of
 * of an image field.
 */
function galleria_field_formatter_info() {
  $formatters = array(
    'galleria' => array(
      'label' => t('Galleria'),
      'field types' => array('image', 'node_reference'),
      'settings' => array(
        'galleria_zoom_style' => '',
        'galleria_thumb_style' => '',
        'galleria_theme' => 'classic',
        'galleria_reference_img_src' => NULL,
      ),
    ),
  );
  return $formatters;
}

/**
 * Implementation of hook_field_formatter_settings_form().
 * 
 * Provides display settings form within the manage display page of 
 * an image field with formatter galleria.
 */
function galleria_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  
  // shows 2 select boxes for the big image style and thumbnail style
  $image_styles = image_style_options(FALSE);
  $element['galleria_zoom_style'] = array(
    '#title' => t('Zoomed image style'),
    '#type' => 'select',
    '#default_value' => $settings['galleria_zoom_style'],
    '#empty_option' => t('None (original image)'),
    '#options' => $image_styles,
  );
  $element['galleria_thumb_style'] = array(
    '#title' => t('Preview image style'),
    '#type' => 'select',
    '#default_value' => $settings['galleria_thumb_style'],
    '#empty_option' => t('None (original image)'),
    '#options' => $image_styles,
  );
  
  // get the available themes from the module folder
  $themes = array();
  $path = libraries_get_path('galleria');
  $dir_handle = opendir($path . '/themes/');
  while ($item = readdir($dir_handle)) {
    if (is_dir($item) || $item == '.' || $item == '..' || substr($item, 0, 1) == '.') continue;
    $themes[$item] = $item;
  }
  
  // only show the theme select box if we got more than one theme
  if (count($themes) > 1) {
    asort($themes);
    
    // show the select box to choose the theme
    $element['galleria_theme'] = array(
      '#title' => t('Theme'),
      '#type' => 'select',
      '#default_value' => isset($settings['galleria_theme']) ? $settings['galleria_theme'] : 'classic', // defaults to classic theme
      '#options' => $themes,
    );
  }
  
  if ($field['type'] == 'node_reference') {
   
    $ref_node_type = array_values(array_filter($field['settings']['referenceable_types']));

    // @todo possibly use field_info_fields().
    // @TODO if there is more than one referenced type, read out image fields of all referenced types
    $sql = "SELECT 
              conf.field_name 
            FROM 
              field_config as conf 
              INNER JOIN field_config_instance as inst 
              ON conf.id = inst.field_id
            WHERE 
              inst.bundle = '$ref_node_type[0]' AND 
              conf.type = 'image' AND
              conf.deleted = 0";
    $result = db_query($sql);
    
    $image_fields = array();
    while ($option = $result->fetchAssoc()) {
       if ($option['field_name'] != 'body') {
         $image_fields[$option['field_name']] = $option['field_name'];
       } 
    }
    asort($image_fields);
    
    if (count($image_fields) == 0) {
      drupal_set_message(t('ERROR: The referenced node type does not contain any valid image field(s).'), 'error');
      return FALSE;
    }
    elseif (count($image_fields) == 1) {
      $keys = array_keys($image_fields);
      $key = $keys[0];
      $element['galleria_reference_img_src'] = array(
        '#type' => 'value',
        '#value' => $image_fields[$key],
      );
    }
    elseif (count($image_fields) > 1) {
      $element['galleria_reference_img_src'] = array(
        '#title' => t('Image source field of the referenced content type'),
        '#type' => 'select',
        '#default_value' => isset($settings['galleria_reference_img_src']) ? $settings['galleria_reference_img_src'] : '', // defaults to classic theme
        '#options' => $image_fields,
      );
    }
  }
    
  return $element;
}

/**
 * Implementation of hook_field_formatter_settings_summary().
 * 
 * Displays the summary of the set options of a Galleria formatted image field
 */
function galleria_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  $image_styles = image_style_options(FALSE);
  // Unset possible 'No defined styles' option.
  unset($image_styles['']);
  // Styles could be lost because of enabled/disabled modules that defines
  // their styles in code.
  if (isset($image_styles[$settings['galleria_zoom_style']])) {
    $summary[] = t('Zoomed image style: @style', array('@style' => $image_styles[$settings['galleria_zoom_style']]));
  }
  else {
    $summary[] = t('Zoomed image style: Original image');
  }

  if (isset($image_styles[$settings['galleria_thumb_style']])) {
    $summary[] = t('Preview image style: @style', array('@style' => $image_styles[$settings['galleria_thumb_style']]));
  }
  else {
    $summary[] = t('Preview image style: Original image');
  }
  
  // display the name of the selected theme
  if (isset($settings['galleria_theme'])) {
    $summary[] = t('Galleria Theme: @theme', array('@theme' => $settings['galleria_theme']));
  }
  else {
    $summary[] = t('No theme selected, default is "classic"');
  }
  
  // display the image source field if the formatter is used on a reference field
  if (isset($settings['galleria_reference_img_src'])) {
    $summary[] = t('Image field of the referenced node: @field', array('@field' => $settings['galleria_reference_img_src']));
  }
  
  return implode('<br />', $summary);
}

/**
 * Implementation of hook_field_formatter_view().
 * 
 * Prepares a renderable array of images and adds the neccessary JS and CSS
 */
function galleria_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  
  if ($field['type'] == 'node_reference') {
    $field_name = $display['settings']['galleria_reference_img_src'];
    $items = array();
    $items = galleria_get_referenced_images($field_name);
  }

  if (count($items) > 0) {
    $element['#theme'] = 'galleria_container';
    galleria_includes($display['settings']['galleria_theme']);
  }
 
  foreach ($items as $delta => $item) {
    if (empty($display['settings']['galleria_zoom_style'])) {
       $zoom_url = file_create_url($item['uri']);
    }
    else {
       $zoom_url = image_style_url($display['settings']['galleria_zoom_style'], $item['uri']);
    }

    $element['#items'][$delta] = array(
      '#theme' => 'image_formatter',
      '#item' => $item,
      '#image_style' => $display['settings']['galleria_thumb_style'],
      '#path' => array(
         'path' => $zoom_url,
         'options' => array(),
      ),
    );
  }
    
  return $element;
}

/**
 * Implmentation of hook_theme().
 */
function galleria_theme() {
 
  return array(
  
   'galleria_container' => array(
      'variables' => array(
        'items' => NULL,
      ),
      'template' => 'galleria-container',
    ),
  );
}

/**
 * Implementation of hook_image_default_styles().
 * 
 * Provides default image style presets that can be overridden by site administrators.
 */
function galleria_image_default_styles() {
  $styles = array();

  // image preset for the big image
  $styles['galleria_zoom'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale',
        'data' => array('width' => 450, 'height' => 300, 'upscale' => 1),
        'weight' => 0,
      ),
    )
  );
  
  // image preset for thumbnails
  $styles['galleria_thumb'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale',
        'data' => array('width' => 50, 'height' => 40, 'upscale' => 1),
        'weight' => 0,
      ),
    )
  );

  return $styles;
}

/**
 * Implementation of hook_views_api().
 * 
 * Neccessary in order to include the galleria style plugin
 */
function galleria_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'galleria'),
  );
}

/*
 * This function returns all images of an image field whose name is passed in argument $field
 */
function galleria_get_referenced_images($field) {
  if (!$field) {
    drupal_set_message(t('ERROR: The referenced field does not contain any image field.'), 'error');
    return FALSE;
  }
  
  $fid_col_name = $field . '_fid';
  $alt_col_name = $field . '_alt';
  $title_col_name = $field . '_title';
  $result = db_query('SELECT ' . $fid_col_name . ',' . $alt_col_name . ',' . $title_col_name . ' FROM {field_data_' . $field . '}');
  
  $images = array();
  while ($row = $result->fetchAssoc()) {
    $image = (array) file_load($row[$fid_col_name]);
    $image['alt'] = $row[$alt_col_name];
    $image['title'] = $row[$title_col_name];
    $images[] = $image;
  }
  
  return $images;
}

/*
 * This function includes the neccessary JS and CSS files only once
 */
function galleria_includes($theme) {
  static $included = FALSE;
  
  // make sure we only include once
  if ($included == FALSE) {

    if (($libpath = libraries_get_path('galleria')) && is_dir(libraries_get_path('galleria'))) {

      // include essential files from /libraries/galleria
      drupal_add_js($libpath . '/galleria-1.2.3.min.js');
      
      // load the theme JS file dynamically
      $dir_handle = opendir($libpath . '/themes/' . $theme . '/');
      while ($file = readdir($dir_handle)) {
        $split = explode('.', $file);
        if ($split[0] == 'galleria' && $split[count($split) - 1] == 'js') {
          $theme_js_file = $file;
          break;
        }
      }
      
      // add the theme JS file
      drupal_add_js($libpath . '/themes/' . $theme . '/' . $theme_js_file);
      
      // add some css theming stuff
      $css  = '.galleria-content {';
      $css .= '  width: ' . (integer) variable_get('galleria_width', 450) . 'px;';
      $css .= '  height: ' . (integer) variable_get('galleria_height', 300) . 'px;';
      $css .= '  margin:0px auto;'; 
      $css .= '}';
      drupal_add_css($css, 'inline');
      
      // add the global galleria settings and the galleria loader script
      galleria_add_settings();
      $path = drupal_get_path('module', 'galleria');
      drupal_add_js($path . '/js/galleria.load.js');
      
      $included = TRUE;
    }
    else {
      // no library exists, output error
      drupal_set_message(t('ERROR: The Galleria Javascript library was not found in sites/all/libraries. Please refer to README.txt for installation instructions.'), 'error');
    }
  }
}

/*
 * This function loads the configured settings of the config page and
 * adds them into the Drupal.settings.galleria.opt JS object which is
 * read when galleria is loaded 
 */
function galleria_add_settings() {
  // set javascript gallereria options
  $thumbnails = variable_get('galleria_thumbnails', 'on');
  
  // add the JS settings, load the values from the config page
  drupal_add_js(
    array(
      'galleria' => array(
        'opt' => array(
          'transition'      => variable_get('galleria_transition', 'fade'),
          'overlay_opacity' => variable_get('galleria_overlay_opacity', 0.85),
          'show_imagenav'   => (boolean) variable_get('galleria_show_imagenav', TRUE),
          'clicknext'       => (boolean) variable_get('galleria_clicknext', TRUE),
          'queue'           => (boolean) variable_get('galleria_queue', TRUE),
          'preload'         => variable_get('galleria_preload', 3),
          'show_counter'    => (boolean) variable_get('galleria_show_counter', TRUE),
          'autoplay'        => 0 != variable_get('galleria_autoplay', 0)? variable_get('galleria_autoplay', 0) : NULL,
          'max_scale_ratio' => variable_get('galleria_max_scale_ratio', 1),
          'min_scale_ratio' => variable_get('galleria_min_scale_ratio', 1),
          'show_info'       => (boolean) variable_get('galleria_show_info', TRUE),
          'thumbnails'      => 'on' == $thumbnails? (boolean) TRUE : ('off' == $thumbnails? FALSE : $thumbnails),
          'imageCrop'       => ('on'==$imagecrop) ? TRUE : (('off'==$imagecrop) ? FALSE : $imagecrop),
        ),
      ),
    ), 
  'setting');
}
