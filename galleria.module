<?php

/**
 * @file
 * A light-weight, customizable image gallery plugin for Drupal based on jQuery
 */

/**
 * Implementation of hook_field_formatter_info().
 * 
 * Adds the Galleria format option within the manage display form of
 * of an image field.
 */
function galleria_field_formatter_info() {
  $formatters = array(
    'galleria' => array(
      'label' => t('Galleria'),
      'field types' => array('image'),
      'settings' => array(
        'galleria_zoom_style' => '',
        'galleria_thumb_style' => '',
        'galleria_theme' => 'classic',
      ),
    ),
  );
  return $formatters;
}

/**
 * Implementation of hook_field_formatter_settings_form().
 * 
 * Provides display settings form within the manage display page of 
 * an image field with formatter galleria.
 */
function galleria_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  
  // shows 2 select boxes for the big image style and thumbnail style
  $image_styles = image_style_options(FALSE);
  $element['galleria_zoom_style'] = array(
    '#title' => t('Zoomed image style'),
    '#type' => 'select',
    '#default_value' => $settings['galleria_zoom_style'],
    '#empty_option' => t('None (original image)'),
    '#options' => $image_styles,
  );
  $element['galleria_thumb_style'] = array(
    '#title' => t('Preview image style'),
    '#type' => 'select',
    '#default_value' => $settings['galleria_thumb_style'],
    '#empty_option' => t('None (original image)'),
    '#options' => $image_styles,
  );
  
  // get the available themes from the module folder
  $themes = array();
  $path = libraries_get_path('galleria');
  $dir_handle = opendir($path . '/themes/');
  while($item = readdir($dir_handle)) {
    if (is_dir($item) || $item == '.' || $item == '..' || substr($item, 0, 1) == '.') continue;
    $themes[$item] = $item;
  }
  
  // only show the theme select box if we got more than one theme
  if (count($themes) > 1) {
    asort($themes);
    
    // show the select box to choose the theme
    $element['galleria_theme'] = array(
      '#title' => t('Theme'),
      '#type' => 'select',
      '#default_value' => 'classic', // defaults to classic theme
      '#options' => $themes,
    );
  }
    
  return $element;
}

/**
 * Implementation of hook_field_formatter_settings_summary().
 * 
 * Displays the summary of the set options of a Galleria formatted image field
 */
function galleria_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  $image_styles = image_style_options(FALSE);
  // Unset possible 'No defined styles' option.
  unset($image_styles['']);
  // Styles could be lost because of enabled/disabled modules that defines
  // their styles in code.
  if (isset($image_styles[$settings['galleria_zoom_style']])) {
    $summary[] = t('Zoomed image style: @style', array('@style' => $image_styles[$settings['galleria_zoom_style']]));
  }
  else {
    $summary[] = t('Zoomed image style: Original image');
  }

  if (isset($image_styles[$settings['galleria_thumb_style']])) {
    $summary[] = t('Preview image style: @style', array('@style' => $image_styles[$settings['galleria_thumb_style']]));
  }
  else {
    $summary[] = t('Preview image style: Original image');
  }
  
  if (isset($settings['galleria_theme'])) {
    $summary[] = t('Galleria Theme: @theme', array('@theme' => $settings['galleria_theme']));
  }
  else {
    $summary[] = t('No theme selected, default is "classic"');
  }
  
  return implode('<br />', $summary);
}

/**
 * Implementation of hook_field_formatter_view().
 * 
 * Prepares a renderable array of images and adds the neccessary JS and CSS
 */
function galleria_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  
  if (count($items) > 0) {
    $element['#theme'] = 'galleria_container';
    galleria_includes($display['settings']['galleria_theme']);
  }
 
  foreach ($items as $delta => $item) {
    if (empty($display['settings']['galleria_zoom_style'])) {
       $zoom_url = file_create_url($item['uri']);
    } else {
       $zoom_url = image_style_url($display['settings']['galleria_zoom_style'], $item['uri']);
    }

    $element['#items'][$delta] = array(
      '#theme' => 'image_formatter',
      '#item' => $item,
      '#image_style' => $display['settings']['galleria_thumb_style'],
      '#path' => array(
         'path' => $zoom_url,
         'options' => array(),
      ),
    );
  }
    
  return $element;
}

/*
 * This function includes the neccessary JS and CSS files only once
 */
function galleria_includes($theme) {
  static $included = FALSE;
  
  // make sure we only include once
  if ($included == FALSE) {

    if (($libpath = libraries_get_path('galleria')) && is_dir(libraries_get_path('galleria'))) {

      // include essential files from /libraries/galleria
      drupal_add_js($libpath . '/galleria-1.2.3.min.js');
      
      // load the theme JS file dynamically
      $dir_handle = opendir($libpath . '/themes/' . $theme . '/');
      while ($file = readdir($dir_handle)) {
        $split = explode('.', $file);
        if ($split[0] == 'galleria' && $split[count($split) - 1] == 'js') {
          $theme_js_file = $file;
          break;
        }
      }
      
      // add the theme JS file
      drupal_add_js($libpath . '/themes/' . $theme . '/' . $theme_js_file);
      
      // load some css theming stuff and the galleria loader script
      $path = drupal_get_path('module', 'galleria');
      drupal_add_css($path . '/galleria.container.css');
      drupal_add_js($path . '/js/galleria.load.js');
      
      $included = TRUE;
    }
    else {
      // no library exists, output error
      drupal_set_message('Error: The Galleria Javascript library was not found in sites/all/libraries. Please refer to README.txt for installation instructions.', 'error');
    }
  }
}

/**
 * Implmentation of hook_theme().
 */
function galleria_theme() {
 
  return array(
  
   'galleria_container' => array(
      'variables' => array(
        'items' => NULL,
      ),
      'template' => 'galleria-container',
    ),
  );
}

/**
 * Implementation of hook_image_default_styles().
 * 
 * Provides default image style presets that can be overridden by site administrators.
 */
 function galleria_image_default_styles() {
  $styles = array();

  // image preset for the big image
  $styles['galleria_zoom'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale',
        'data' => array('width' => 450, 'height' => 300, 'upscale' => 1),
        'weight' => 0,
      ),
    )
  );
  
  // image preset for thumbnails
  $styles['galleria_thumb'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale',
        'data' => array('width' => 50, 'height' => 40, 'upscale' => 1),
        'weight' => 0,
      ),
    )
  );

  return $styles;
}

/**
 * Implementation of hook_views_api().
 * 
 * Neccessary in order to include the galleria style plugin
 */
function galleria_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'galleria'),
  );
}